import org.apache.tools.ant.taskdefs.condition.Os
ext {
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        natives = ["linux_amd64_gcc","linux_i686_gcc","linux_windows_amd64_mingw32","linux_windows_i686_mingw32"]
    }
    generatedSrcDir = 'src/generated/java'
}

// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(
buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        dependencies {
            classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.7.3')
        }
    }
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group = 'org.terasology'


dependencies {
    compile group: 'org.terasology', name: 'TeraMath', version: '1.4.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
}

sourceSets {
    main {
        java {
            srcDir generatedSrcDir
        }
    }
}

task generateSources{
    dependsOn ":swig-src:Swig"
}

compileJava.dependsOn generateSources

clean {
    // the clean task should delete the folder, because it is the
    // output folder of generateSources, but it doesn't do it.
    delete generatedSrcDir
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    // MovingBlocks Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    from sourceSets.test.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}
natives.each { module ->
    tasks.create(name: "native_${module}", type: Exec) {
        description = "cmake ${module}"
        executable "cmake"
        workingDir "$rootDir/build/natives/${module}"
        args "$rootDir", "-DCMAKE_TOOLCHAIN_FILE=$rootDir/toolchains/${module}.cmake"
        doFirst {
            mkdir "$rootDir/build/natives/${module}"
        }
        doLast {
            exec {
                workingDir "$rootDir/build/natives/${module}"
                commandLine 'make'
            }
        }
    }
}
task NativeBuild{
    description = "Builds Natives"
    natives.each { module ->
        dependsOn "native_${module}"
    }
}
task zipNatives(type: Zip){
    description 'Creates a zip archive that contains all TeraBullet native files'
    natives.each { module ->
        from ("$rootDir/build/natives/${module}") {
            include '*linux*'
            into 'linux'
        }

        from ("$rootDir/build/natives/${module}") {
            include '*windows*'
            into 'windows'
        }
    }

    destinationDir = file(buildDir)
    baseName = 'native-bullet'
}

artifactoryPublish {
    dependsOn  sourceJar, javadocJar, zipNatives
}


NativeBuild.dependsOn generateSources
zipNatives.dependsOn NativeBuild

publishing {
    publications {
        NativeBullet(MavenPublication) {
            // Without this we get a .pom with no dependencies
            artifactId='native-bullet'

            from components.java
            artifact sourceJar
            artifact javadocJar
            artifact zipNatives

            pom {
                name = "NativeBullet"
                description = "A Native Bullet Wrapper"
                url = "http://www.example.com/project"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "michaelpollind"
                        name = "Michael Pollind"
                        email = "polli104@mail.chapman.edu"
                    }
                }
                scm {
                    connection = "https://github.com/MovingBlocks/NativeBullet.git"
                    developerConnection = "git@github.com:MovingBlocks/NativeBullet.git"
                    url = "https://github.com/MovingBlocks/NativeBullet"
                }
            }
        }
    }
}


artifactory {
    contextUrl = 'http://artifactory.terasology.org/artifactory'
    publish {
        repository {
            repoKey = 'terasology-snapshot-local' // The Artifactory repository key to publish to
            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                mavenCompatible = true
                //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
            }
        }
        defaults {

            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
//            publications('mavenJava')
//            publications('zippedNatives')
            publications('NativeBullet')

//          publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
            publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }
}



javadoc {
    failOnError = false
}
