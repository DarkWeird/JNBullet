/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.softbody;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.physics.bullet.dynamics.*;
import org.terasology.math.geom.Vector3f;
import org.terasology.math.geom.Quat4f;
import org.terasology.math.geom.Matrix3f;
import org.terasology.math.geom.Matrix4f;

public class Softbody implements SoftbodyConstants {

	/** Temporary Vector3f instance, used by native methods that return a Vector3f instance */
	public final static Vector3f staticVector3f = new Vector3f();
	/** Pool of Vector3f, used by native (callback) method for the arguments */
	public final static com.badlogic.gdx.utils.Pool<Vector3f> poolVector3f = new com.badlogic.gdx.utils.Pool<Vector3f>() {
		@Override
		protected Vector3f newObject() {
			return new Vector3f();
		}
	};


	/** Temporary Quat4f instance, used by native methods that return a Quat4f instance */
	public final static Quat4f staticQuat4f = new Quat4f();
	/** Pool of Quat4f, used by native (callback) method for the arguments */
	public final static com.badlogic.gdx.utils.Pool<Quat4f> poolQuat4f = new com.badlogic.gdx.utils.Pool<Quat4f>() {
		@Override
		protected Quat4f newObject() {
			return new Quat4f();
		}
	};


	/** Temporary Matrix3f instance, used by native methods that return a Matrix3f instance */
	public final static Matrix3f staticMatrix3f = new Matrix3f();
	/** Pool of Matrix3f, used by native (callback) method for the arguments */
	public final static com.badlogic.gdx.utils.Pool<Matrix3f> poolMatrix3f = new com.badlogic.gdx.utils.Pool<Matrix3f>() {
		@Override
		protected Matrix3f newObject() {
			return new Matrix3f();
		}
	};


	/** Temporary Matrix4f instance, used by native methods that return a Matrix4f instance */
	public final static Matrix4f staticMatrix4f = new Matrix4f();
	/** Pool of Matrix4f, used by native (callback) method for the arguments */
	public final static com.badlogic.gdx.utils.Pool<Matrix4f> poolMatrix4f = new com.badlogic.gdx.utils.Pool<Matrix4f>() {
		@Override
		protected Matrix4f newObject() {
			return new Matrix4f();
		}
	};

  public static Matrix3f Lerp(Matrix3f a, Matrix3f b, float t) {
	return SoftbodyJNI.Lerp(a, b, t);
}

  public static Vector3f Clamp(Vector3f v, float maxlength) {
	return SoftbodyJNI.Clamp(v, maxlength);
}

  public static float ClusterMetric(Vector3f x, Vector3f y) {
    return SoftbodyJNI.ClusterMetric(x, y);
  }

  public static Matrix3f ScaleAlongAxis(Vector3f a, float s) {
	return SoftbodyJNI.ScaleAlongAxis(a, s);
}

  public static Matrix3f Cross(Vector3f v) {
	return SoftbodyJNI.Cross(v);
}

  public static Matrix3f Diagonal(float x) {
	return SoftbodyJNI.Diagonal(x);
}

  public static Matrix3f Add(Matrix3f a, Matrix3f b) {
	return SoftbodyJNI.Add(a, b);
}

  public static Matrix3f Sub(Matrix3f a, Matrix3f b) {
	return SoftbodyJNI.Sub(a, b);
}

  public static Matrix3f Mul(Matrix3f a, float b) {
	return SoftbodyJNI.Mul(a, b);
}

  public static void Orthogonalize(Matrix3f m) {
    SoftbodyJNI.Orthogonalize(m);
  }

  public static Matrix3f MassMatrix(float im, Matrix3f iwi, Vector3f r) {
	return SoftbodyJNI.MassMatrix(im, iwi, r);
}

  public static Matrix3f ImpulseMatrix(float dt, float ima, float imb, Matrix3f iwi, Vector3f r) {
	return SoftbodyJNI.ImpulseMatrix__SWIG_0(dt, ima, imb, iwi, r);
}

  public static Matrix3f ImpulseMatrix(float ima, Matrix3f iia, Vector3f ra, float imb, Matrix3f iib, Vector3f rb) {
	return SoftbodyJNI.ImpulseMatrix__SWIG_1(ima, iia, ra, imb, iib, rb);
}

  public static Matrix3f AngularImpulseMatrix(Matrix3f iia, Matrix3f iib) {
	return SoftbodyJNI.AngularImpulseMatrix(iia, iib);
}

  public static Vector3f ProjectOnAxis(Vector3f v, Vector3f a) {
	return SoftbodyJNI.ProjectOnAxis(v, a);
}

  public static Vector3f ProjectOnPlane(Vector3f v, Vector3f a) {
	return SoftbodyJNI.ProjectOnPlane(v, a);
}

  public static void ProjectOrigin(Vector3f a, Vector3f b, Vector3f prj, SWIGTYPE_p_float sqd) {
    SoftbodyJNI.ProjectOrigin__SWIG_0(a, b, prj, SWIGTYPE_p_float.getCPtr(sqd));
  }

  public static void ProjectOrigin(Vector3f a, Vector3f b, Vector3f c, Vector3f prj, SWIGTYPE_p_float sqd) {
    SoftbodyJNI.ProjectOrigin__SWIG_1(a, b, c, prj, SWIGTYPE_p_float.getCPtr(sqd));
  }

  public static Vector3f BaryCoord(Vector3f a, Vector3f b, Vector3f c, Vector3f p) {
	return SoftbodyJNI.BaryCoord(a, b, c, p);
}

  public static float ImplicitSolve(btSoftBody.ImplicitFn fn, Vector3f a, Vector3f b, float accuracy, int maxiterations) {
    return SoftbodyJNI.ImplicitSolve__SWIG_0(btSoftBody.ImplicitFn.getCPtr(fn), fn, a, b, accuracy, maxiterations);
  }

  public static float ImplicitSolve(btSoftBody.ImplicitFn fn, Vector3f a, Vector3f b, float accuracy) {
    return SoftbodyJNI.ImplicitSolve__SWIG_1(btSoftBody.ImplicitFn.getCPtr(fn), fn, a, b, accuracy);
  }

  public static Vector3f NormalizeAny(Vector3f v) {
	return SoftbodyJNI.NormalizeAny(v);
}

  public static btDbvtAabbMm VolumeOf(btSoftBody.Face f, float margin) {
    return new btDbvtAabbMm(SoftbodyJNI.VolumeOf__SWIG_0(btSoftBody.Face.getCPtr(f), f, margin), true);
  }

  public static Vector3f CenterOf(btSoftBody.Face f) {
	return SoftbodyJNI.CenterOf(btSoftBody.Face.getCPtr(f), f);
}

  public static float AreaOf(Vector3f x0, Vector3f x1, Vector3f x2) {
    return SoftbodyJNI.AreaOf(x0, x1, x2);
  }

  public static float VolumeOf(Vector3f x0, Vector3f x1, Vector3f x2, Vector3f x3) {
    return SoftbodyJNI.VolumeOf__SWIG_1(x0, x1, x2, x3);
  }

  public static void EvaluateMedium(btSoftBodyWorldInfo wfi, Vector3f x, btSoftBody.sMedium medium) {
    SoftbodyJNI.EvaluateMedium(btSoftBodyWorldInfo.getCPtr(wfi), wfi, x, btSoftBody.sMedium.getCPtr(medium), medium);
  }

  public static void ApplyClampedForce(btSoftBody.Node n, Vector3f f, float dt) {
    SoftbodyJNI.ApplyClampedForce(btSoftBody.Node.getCPtr(n), n, f, dt);
  }

  public static int MatchEdge(btSoftBody.Node a, btSoftBody.Node b, btSoftBody.Node ma, btSoftBody.Node mb) {
    return SoftbodyJNI.MatchEdge(btSoftBody.Node.getCPtr(a), a, btSoftBody.Node.getCPtr(b), b, btSoftBody.Node.getCPtr(ma), ma, btSoftBody.Node.getCPtr(mb), mb);
  }

  public static int PolarDecompose(Matrix3f m, Matrix3f q, Matrix3f s) {
    return SoftbodyJNI.PolarDecompose(m, q, s);
  }

}
