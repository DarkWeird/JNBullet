/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.linearmath;

import com.badlogic.gdx.physics.bullet.BulletBase;
import org.terasology.math.geom.Vector3f;
import org.terasology.math.geom.Quat4f;
import org.terasology.math.geom.Matrix3f;
import org.terasology.math.geom.Matrix4f;

public class btTransform extends BulletBase {
	private long swigCPtr;
	
	protected btTransform(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btTransform, normally you should not need this constructor it's intended for low-level usage. */ 
	public btTransform(long cPtr, boolean cMemoryOwn) {
		this("btTransform", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btTransform obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				LinearMathJNI.delete_btTransform(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public btTransform() {
    this(LinearMathJNI.new_btTransform__SWIG_0(), true);
  }

  public btTransform(Quat4f q, Vector3f c) {
    this(LinearMathJNI.new_btTransform__SWIG_1(q, c), true);
  }

  public btTransform(Quat4f q) {
    this(LinearMathJNI.new_btTransform__SWIG_2(q), true);
  }

  public btTransform(Matrix3f b, Vector3f c) {
    this(LinearMathJNI.new_btTransform__SWIG_3(b, c), true);
  }

  public btTransform(Matrix3f b) {
    this(LinearMathJNI.new_btTransform__SWIG_4(b), true);
  }

  public btTransform(Matrix4f other) {
    this(LinearMathJNI.new_btTransform__SWIG_5(other), true);
  }

  public void mult(Matrix4f t1, Matrix4f t2) {
    LinearMathJNI.btTransform_mult(swigCPtr, this, t1, t2);
  }

  public Matrix3f getBasis() {
	return LinearMathJNI.btTransform_getBasis__SWIG_0(swigCPtr, this);
}

  public Vector3f getOrigin() {
	return LinearMathJNI.btTransform_getOrigin__SWIG_0(swigCPtr, this);
}

  public Quat4f getRotation() {
	return LinearMathJNI.btTransform_getRotation(swigCPtr, this);
}

  public void setFromOpenGLMatrix(float[] m) {
    LinearMathJNI.btTransform_setFromOpenGLMatrix(swigCPtr, this, m);
  }

  public void getOpenGLMatrix(float[] m) {
    LinearMathJNI.btTransform_getOpenGLMatrix(swigCPtr, this, m);
  }

  public void setOrigin(Vector3f origin) {
    LinearMathJNI.btTransform_setOrigin(swigCPtr, this, origin);
  }

  public Vector3f invXform(Vector3f inVec) {
	return LinearMathJNI.btTransform_invXform(swigCPtr, this, inVec);
}

  public void setBasis(Matrix3f basis) {
    LinearMathJNI.btTransform_setBasis(swigCPtr, this, basis);
  }

  public void setRotation(Quat4f q) {
    LinearMathJNI.btTransform_setRotation(swigCPtr, this, q);
  }

  public void setIdentity() {
    LinearMathJNI.btTransform_setIdentity(swigCPtr, this);
  }

  public Matrix4f inverse() {
	return LinearMathJNI.btTransform_inverse(swigCPtr, this);
}

  public Matrix4f inverseTimes(Matrix4f t) {
	return LinearMathJNI.btTransform_inverseTimes(swigCPtr, this, t);
}

  public static Matrix4f getIdentity() {
	return LinearMathJNI.btTransform_getIdentity();
}

  public void serialize(btTransformFloatData dataOut) {
    LinearMathJNI.btTransform_serialize(swigCPtr, this, btTransformFloatData.getCPtr(dataOut), dataOut);
  }

  public void serializeFloat(btTransformFloatData dataOut) {
    LinearMathJNI.btTransform_serializeFloat(swigCPtr, this, btTransformFloatData.getCPtr(dataOut), dataOut);
  }

  public void deSerialize(btTransformFloatData dataIn) {
    LinearMathJNI.btTransform_deSerialize(swigCPtr, this, btTransformFloatData.getCPtr(dataIn), dataIn);
  }

  public void deSerializeDouble(btTransformDoubleData dataIn) {
    LinearMathJNI.btTransform_deSerializeDouble(swigCPtr, this, btTransformDoubleData.getCPtr(dataIn), dataIn);
  }

  public void deSerializeFloat(btTransformFloatData dataIn) {
    LinearMathJNI.btTransform_deSerializeFloat(swigCPtr, this, btTransformFloatData.getCPtr(dataIn), dataIn);
  }

}
