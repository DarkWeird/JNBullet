/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.linearmath;

import com.badlogic.gdx.physics.bullet.BulletBase;
import org.terasology.math.geom.Vector3f;
import org.terasology.math.geom.Quat4f;
import org.terasology.math.geom.Matrix3f;
import org.terasology.math.geom.Matrix4f;

public class btTransformUtil extends BulletBase {
	private long swigCPtr;
	
	protected btTransformUtil(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btTransformUtil, normally you should not need this constructor it's intended for low-level usage. */ 
	public btTransformUtil(long cPtr, boolean cMemoryOwn) {
		this("btTransformUtil", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btTransformUtil obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				LinearMathJNI.delete_btTransformUtil(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public static void integrateTransform(Matrix4f curTrans, Vector3f linvel, Vector3f angvel, float timeStep, Matrix4f predictedTransform) {
    LinearMathJNI.btTransformUtil_integrateTransform(curTrans, linvel, angvel, timeStep, predictedTransform);
  }

  public static void calculateVelocityQuaternion(Vector3f pos0, Vector3f pos1, Quat4f orn0, Quat4f orn1, float timeStep, Vector3f linVel, Vector3f angVel) {
    LinearMathJNI.btTransformUtil_calculateVelocityQuaternion(pos0, pos1, orn0, orn1, timeStep, linVel, angVel);
  }

  public static void calculateDiffAxisAngleQuaternion(Quat4f orn0, Quat4f orn1a, Vector3f axis, SWIGTYPE_p_float angle) {
    LinearMathJNI.btTransformUtil_calculateDiffAxisAngleQuaternion(orn0, orn1a, axis, SWIGTYPE_p_float.getCPtr(angle));
  }

  public static void calculateVelocity(Matrix4f transform0, Matrix4f transform1, float timeStep, Vector3f linVel, Vector3f angVel) {
    LinearMathJNI.btTransformUtil_calculateVelocity(transform0, transform1, timeStep, linVel, angVel);
  }

  public static void calculateDiffAxisAngle(Matrix4f transform0, Matrix4f transform1, Vector3f axis, SWIGTYPE_p_float angle) {
    LinearMathJNI.btTransformUtil_calculateDiffAxisAngle(transform0, transform1, axis, SWIGTYPE_p_float.getCPtr(angle));
  }

  public btTransformUtil() {
    this(LinearMathJNI.new_btTransformUtil(), true);
  }

}
